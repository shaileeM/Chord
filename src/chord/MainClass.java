package chord;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author raggupta
 */
public class MainClass extends javax.swing.JFrame {

    
    /**
     * Creates new form MainClass
     */
        public static TreeMap<Integer, String> keyIPMap = new TreeMap<>();
	public static String leader = "172.20.109.215";
	public static int nodeVal;
	public static String myIp;
        public MainClass() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Add Node");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Node ID", "IP Address"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextArea1PropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        jButton2.setText("Add File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Search File");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Node");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Stabilize");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Node Value", "IP Address"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField4)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField2)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField3)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton6)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(168, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        MainClass.myIp = jTextField1.getText();
        String hostname = jTextField1.getText();
       if(MainClass.keyIPMap.lastEntry()== null){
                    	jTextArea1.setText("Adding node");
                    
                 	ClassAdd classobj = new ClassAdd();
                        int nodeVal = classobj.addNode(hostname, MainClass.keyIPMap);
                        System.out.println("last node value..............." + MainClass.keyIPMap.lastEntry().getValue());
                        System.out.println(" adding node for the 1st time");
                        CreateFinger obj1 = new CreateFinger();
                        obj1.fingerTable(nodeVal,  MainClass.keyIPMap);
                     
                        new Leader(MainClass.keyIPMap).start();
                        if(MainClass.myIp!=MainClass.leader) new Node().start();
                        if(MainClass.myIp==MainClass.leader) new Stabilize().start();
                        jTextArea1.setText("Node Val :  " + nodeVal+ "     " + "leader is :    " +MainClass.keyIPMap.lastEntry().getValue()  + "\n" );
                        jTextArea1.append("Finger Table : " + "\n");
                        int i=0; 
                        for(Map.Entry<Integer,String> entry : MainClass.keyIPMap.entrySet()) {
                           int nodeValue = entry.getKey();
        		  String ipAddress = entry.getValue();
                          
                         jTable1.setValueAt(nodeValue, i, 0);
                         jTable1.setValueAt(ipAddress, i, 1);
                         i++; 
                        }
                        for(Map.Entry<Integer, Integer> entry : CreateFinger.fingerTable1.entrySet())
                        {
                                 Integer key = entry.getKey();
                                 Integer value = entry.getValue();
                                 
                                 
                                 //jTextArea1.setText(key+ "   " + value);
                                 
                                 jTextArea1.append(" key --> "+  key + "    " + "Node -->" + value + "\n");
                              
                        }
                       
                    }
                    
                    else{
        
      {
                    	
                    try {
                    	
                    	System.out.println("leader value................" + MainClass.leader);
                    	Socket client=new Socket(MainClass.leader, 9091);
                    		int count = 0;
                    		count = count + 1;
                       	 	System.out.println("going to connect to leader");  
                        	 new ClientAdd(client, hostname, count).start();
                                 jTextArea1.setText("Node Val :  " + nodeVal+ "     " + "leader is :    " +MainClass.keyIPMap.lastEntry().getValue()  + "\n" );
                        jTextArea1.append("Finger Table : " + "\n");
                         int i=0; 
                        for(Map.Entry<Integer,String> entry : MainClass.keyIPMap.entrySet()) {
                           int nodeValue = entry.getKey();
        		  String ipAddress = entry.getValue();
                          jTable1.setValueAt(i, i, 0);
                         jTable1.setValueAt(nodeValue, i, 1);
                         jTable1.setValueAt(ipAddress, i, 2);
                         i++; 
                        }
                        for(Map.Entry<Integer, Integer> entry : CreateFinger.fingerTable1.entrySet())
                        {
                                 Integer key = entry.getKey();
                                 Integer value = entry.getValue();
                                 
                                 
                                 //jTextArea1.setText(key+ "   " + value);
                                 
                                 jTextArea1.append(" key --> "+  key + "    " + "Node -->" + value + "\n");
                              
                        }
                    }
                    
                    catch (Exception e) {
    					e.printStackTrace();
    					}
                   }
        }
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextArea1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextArea1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1PropertyChange

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        new Stabilize().start();
         jTextArea1.setText("current values are:");
                  int i=0;
          for(Map.Entry<Integer,String> entry : MainClass.keyIPMap.entrySet()) {
                           int nodeValue = entry.getKey();
        		  String ipAddress = entry.getValue();
                          jTable1.setValueAt(i, i, 0);
                         jTable1.setValueAt(nodeValue, i, 1);
                         jTable1.setValueAt(ipAddress, i, 2);
                         i++; 
                        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        
        jTextArea1.setText(("Deleting Node"));
        //Scanner scan= new Scanner();
        try{
         Socket deleteNode=new Socket(MainClass.leader, 9093);
                    ObjectOutputStream nodeOutputStream = new ObjectOutputStream(deleteNode.getOutputStream());
                    nodeOutputStream.writeObject(MainClass.nodeVal);
                    int i =0;
                       for(Map.Entry<Integer,String> entry : MainClass.keyIPMap.entrySet()) {
                           int nodeValue = entry.getKey();
        		  String ipAddress = entry.getValue();
                          jTable1.setValueAt(i, i, 0);
                         jTable1.setValueAt(nodeValue, i, 1);
                         jTable1.setValueAt(ipAddress, i, 2);
                         i++; 
                        }
        }
        catch(Exception E){
            
        }
               
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ClassAdd c = new ClassAdd();
        AddFile addFile = new AddFile();
        FileSearch f = new FileSearch();
        DeleteFile del = new DeleteFile();
        FileSearch_Updated fileSearch_Updated=new FileSearch_Updated();
        
        HashMap<Integer, ArrayList<String>> fileTable = new HashMap<Integer, ArrayList<String>>();
        ArrayList<String> fileList = new ArrayList<>();
        FileSearch_Server fileSearch_Server=new FileSearch_Server();
        System.out.println("Enter the File Name");
                    String fileName = jTextField2 .getText();
                    addFile.addingFile(fileName, keyIPMap, fileTable, fileList);
                    jTextArea1.setText(" File Hashed to" + MainClass.nodeVal);
                    jTextArea1.append(" File sent to node ID 93" + MainClass.nodeVal);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                 String fileName = jTextField3.getText();
                 ClassAdd c = new ClassAdd();
        AddFile addFile = new AddFile();
        FileSearch f = new FileSearch();
        DeleteFile del = new DeleteFile();
        FileSearch_Updated fileSearch_Updated=new FileSearch_Updated();
        
        HashMap<Integer, ArrayList<String>> fileTable = new HashMap<Integer, ArrayList<String>>();
        ArrayList<String> fileList = new ArrayList<>();
        FileSearch_Server fileSearch_Server=new FileSearch_Server();
        try {
 
            fileSearch_Updated.searchingFile(fileName, MainClass.keyIPMap, fileTable, fileList);
             fileSearch_Server.fileSearch_Server(keyIPMap, fileTable, fileList);
        } catch (IOException ex) {
            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
        }
                   

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnknownHostException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainClass().setVisible(true);
            }
        });
        
        ClassAdd c = new ClassAdd();
        AddFile addFile = new AddFile();
        FileSearch f = new FileSearch();
        DeleteFile del = new DeleteFile();
        FileSearch_Updated fileSearch_Updated=new FileSearch_Updated();
        
        HashMap<Integer, ArrayList<String>> fileTable = new HashMap<Integer, ArrayList<String>>();
        ArrayList<String> fileList = new ArrayList<>();
        FileSearch_Server fileSearch_Server=new FileSearch_Server();
       // HashMap<Integer, Integer> fingerTable=new HashMap<>();

        do {
            Scanner scan = new Scanner(System.in);
            System.out.println(" 1. Add a new peer");
            System.out.println(" 2. Upload a file in the peer-to-peer system");
            System.out.println(" 3. Search for a file");
            System.out.println(" 4. Delete a file");
            System.out.println(" 5. Peer leaves the system");
            System.out.println(" 6. Quit");
            System.out.println(" 7. Run Search server");
            System.out.println(" 8. Run Stabilize");
            int choice = scan.nextInt();
        	//fileSearch_Server.fileSearch_Server(keyIPMap, fileTable, fileList);

            switch (choice) {
                case 1:
                	System.out.println("Enter the IP address");
                    String hostname = scan.next();
                    MainClass.myIp = hostname;
                    //check if Leader. create threads to keep listening to the port 8090 for new connections , heartbeat
                  if(MainClass.keyIPMap.lastEntry()== null){
                    	
                 	   	ClassAdd classobj = new ClassAdd();
                        int nodeVal = classobj.addNode(hostname, MainClass.keyIPMap);
                        System.out.println("last node value..............." + MainClass.keyIPMap.lastEntry().getValue());
                        System.out.println(" adding node for the 1st time");
                        CreateFinger obj1 = new CreateFinger();
                        obj1.fingerTable(nodeVal,  MainClass.keyIPMap);
                        Scanner ipScan = new Scanner(System.in);
                        System.out.println("Enter your own Ip Address");
                        String myIp = ipScan.nextLine();
                        new Leader(MainClass.keyIPMap).start();
                        if(MainClass.myIp!=MainClass.leader) new Node().start();
                        if(MainClass.myIp==MainClass.leader) new Stabilize().start();
                       
                    }
                    
                    else{
                 	
                    try {
                    	
                    	System.out.println("leader value................" + MainClass.leader);
                    	Socket client=new Socket(MainClass.leader, 9091);
                    		int count = 0;
                    		count = count + 1;
                       	 	System.out.println("going to connect to leader");  
                        	 new ClientAdd(client, hostname, count).start();
                
                    }
                    
                    catch (Exception e) {
    					e.printStackTrace();
    					}
             //      }
                    break;
                  }
                case 2:
                    System.out.println("Enter the File Name");
                    String fileName = scan.next();
                    addFile.addingFile(fileName, keyIPMap, fileTable, fileList);
                    break;

                case 3:
                    System.out.println("Enter the name of the file to be searched for");
                    fileName = scan.next();
                    fileSearch_Updated.searchingFile(fileName, keyIPMap, fileTable, fileList);
                    fileSearch_Server.fileSearch_Server(keyIPMap, fileTable, fileList);

                    break;

                case 4:
                    System.out.println("Enter the name of the file to be deleted");
                    fileName = scan.next();
                    del.DeleteSearch(fileName, fileTable, keyIPMap);
                    break;

                case 5:
                    System.out.println("ENTER THE HOSTNAME  ");   
                    hostname = scan.next();
                    Socket deleteNode=new Socket(MainClass.leader, 9093);
                    ObjectOutputStream nodeOutputStream = new ObjectOutputStream(deleteNode.getOutputStream());
                    nodeOutputStream.writeObject(MainClass.nodeVal);
                    break;
                 
                case 6:        
                   // System.exit(0);
                    break;
                    
               case 7:
                	System.out.println("Start File Server");
                	fileSearch_Server.fileSearch_Server(keyIPMap, fileTable, fileList);
                	break;
                	
               case 8:
            	   new Stabilize().start();
            }
        } while (true);
    }
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
